--- Step 0 Eclipse configuration

got maven for Eclipse (m2e)



--- Step 1 Setup Webapp Project and verify that it runs

created a maven webapp project in Eclipse
- GroupId org.apache.maven.archetypes
- ArtifactId maven-archetype-webapp
- Vertion RELEASE

make the project faceted with the follower facets
- Dynamic Web Module (required to be able to run a dev server)
- Java 1.6
- JavaScript (if desired)

update the project's Deployment Assembly so that can run a Tomcat dev server from a maven structured project
- see http://stackoverflow.com/questions/10046654/maven-spring-dynamic-web-module-eclipse-java-lang-classnotfoundexcepti/12600686#12600686
- Project > Properties > Deployment Assembly > Add then
- add the Maven Dependencies -> WEB-INF/lib (Java Build Path Entries type)
- add src/main/webapp -> / (Folder type)
- remove the WebContent folder (both in the deployment assembly and in the actual project structure)

update web.xml to have a jsp-file in the servlet spec for /index.jsp, and a servlet-mapping that points all urls to the index. i.e.

<?xml version="1.0" encoding="UTF-8"?>

<web-app
	xmlns="http://java.sun.com/xml/ns/javee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
    version="3.0">

	<!-- SERVLETS ================================================================================================== -->
	<!-- By default Spring uses /WEB-INF/${servlet-name}-servlet.xml as the servlet context. Can override with an
	init-param entity -->
		
	<servlet>
		<servlet-name>[servlet-name]</servlet-name>
		<jsp-file>/index.jsp</jsp-file>
    	<load-on-startup>2</load-on-startup>
	</servlet>

	
	<!-- SERVLET-MAPPINGS ========================================================================================== -->

	<servlet-mapping>
		<servlet-name>[servlet-name]</servlet-name>
		<url-pattern>/[spring-context-pathname]/*</url-pattern>
	</servlet-mapping>

</web-app>


if you can access the webapp then commit the changes



--- Step 2 Setup Spring MVC

(based on LDS Stack training for setting up a Spring MVC webapp, which uses mvc:view-controller)

- now change the jsp-file attribute of the servlet spec to servlet-class like so

<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

- then create a file at the same level as web.xml named ${servlet-name}-servlet.xml. This file defines the MVC context, for example:

<?xml version="1.0" encoding="UTF-8"?>
<!-- Based on examples in the LDS Stack Training: http://tech.lds.org/wiki/Introduction_to_Spring_MVC -->
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://code.lds.org/schema/spring/web http://code.lds.org/schema/spring/web/stack-web-3.0.xsd"
	default-lazy-init="true">

	<context:annotation-config />

	<!-- If beans are annotation driven -->
	<mvc:annotation-driven />

	<!-- Controller Beans -->
	<context:component-scan base-package="kpbinc.cs462.guild.controller" use-default-filters="false">
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	<context:component-scan base-package="kpbinc.cs462.shared.controller.context" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	<bean id="contextPaths"
		class="kpbinc.cs462.shared.controller.context.ContextPaths"
		scope="request">
		<property name="dynamicRelativePath" value="dynamic" />	
	</bean>
	<context:component-scan base-package="kpbinc.cs462.shared.event" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
	</context:component-scan>
	
	<!-- Model Beans -->
	<context:component-scan base-package="kpbinc.cs462.guild.model.manage" use-default-filters="false">
    	<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	
	<!-- View Resolution Rules -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

</beans>


- Now update the pom.xml file to include the following dependencies (G, A, V)
-- kpbinc.cs462, shared, 0.5 (or latest)
-- junit, junit, 4.11
-- javax.servlet, servlet-api, 3.0-alpha-1
-- javax.servlet, jstl, 1.2
-- org.springframework, spring-webmvc, 3.0.7.RELEASE
-- com.fasterxml.jackson.core, jackson-databind, 2.1.3


- Add classes in kpbinc.cs462.<project-name>.controller
-- <project-name>BaseSiteContextController that extends SharedBaseSiteContextController
-- DefaultController that maps the url "/" (corresponding to /[spring-context-pathname]/) to the welcome page, for example

package kpbinc.cs462.guild.controller;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import kpbinc.util.logging.GlobalLogUtils;

@Controller
@Scope(value = "request")
@RequestMapping(value = "/")
public class DefaultController extends GuildBaseSiteContextController {

	//= Initialization =================================================================================================
	
	public DefaultController() {
		GlobalLogUtils.logConstruction(this);
	}

	
	//= Interface ======================================================================================================
	
	@RequestMapping
	public String getWelcomePage() {
		return "welcome";
	}
	
}


- Create a taglib directory WEB-INF/tags and add a pagetemplate.tag, for example

<!-- Based on template.tag file example in the LDS Stack training on Intermediate JSP -->
<%@ tag description="Site Template Taglet" pageEncoding="UTF-8" %>
<!-- could include initialization code/scriptlets -->
<%@ attribute name="header" required="false" fragment="true" %>
<%@ attribute name="title" required="true" rtexprvalue="true" %>
<!DOCTYPE html>
<html>
	<head>
		<jsp:invoke fragment="header" />
		<title>${title}</title>
	</head>
	<body>
<%-- 		<%@ include file="/WEB-INF/views/includes/navigation.jsp" %> --%>
		<div id="main-content-panel">
			<jsp:doBody />
		</div>
	</body>
</html>


- Create a welcome.jsp page in WEB-INF/views/, for example

<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib prefix="customtags" tagdir="/WEB-INF/tags" %>

<customtags:pagetemplate>
	<jsp:attribute name="title">Welcome!</jsp:attribute>
	<jsp:body>
		<h1>Fast Flower Delivery Service: Driver Guild Site</h1>
		<p>Welcome to the Fast Flower Delivery Service Driver Guild site.</p>
		<a href="https://github.com/windley/CS462-Event-Edition/tree/master/project">Project Specifications</a>
	</jsp:body>
</customtags:pagetemplate>



--- Step 3 Spring Security

- add to pom.xml
org.springframework.security, spring-security-web, 3.1.3.RELEASE
org.springframework.security, spring-security-config, 3.1.3.RELEASE

- add to web.xml

<!-- CONTEXT-PARAMS ============================================================================================ -->
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/*.xml</param-value>
	</context-param>

	
	<!-- LISTENERS ================================================================================================= -->
	
	<listener>
		<!-- Requires context-param contextConfigLocation -->
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>


<!-- FILTERS =================================================================================================== -->
	
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
			<!-- delegates to the spring bean with name of ${filter-name} -->
		</filter-class>
	</filter>
	
	
	<!-- FILTER-MAPPINGS =========================================================================================== -->
	<!-- Note: spring security filter mapping is generally first since anything before it would not be secured. -->

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



- add security.xml file to WEB-INF/spring/ directory, for example

<?xml version="1.0" encoding="UTF-8"?>
<!-- Based on examples in SpringSource security training video at http://www.springsource.org/node/3670 -->
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- Creates the springSecurityFilterChain -->
	<http use-expressions="true">
		<!-- URLs to secure and how to secure them -->
		<!-- pattern is ant regex so ** matches any directory path -->
		<intercept-url pattern="/dynamic/secure/accounts/signin" access="permitAll" />
		<intercept-url pattern="/dynamic/secure/accounts/register" access="permitAll" />
		<intercept-url pattern="/dynamic/secure/**" access="hasRole('ROLE_USER')"/>
		<!-- Redirect to a form login if not authenticated/authorized? -->
		<form-login
			login-page="/dynamic/secure/accounts/signin"
			login-processing-url="/dynamic/secure/accounts/authenticate"
			always-use-default-target="true"
			default-target-url="/dynamic/secure/accounts/authenticate/success"
			password-parameter="password"
			username-parameter="username" />
		<logout
			logout-url="/dynamic/secure/accounts/signout" 
			logout-success-url="/dynamic/"
			invalidate-session="true" />
	</http>

	<authentication-manager>
		<authentication-provider user-service-ref="inMemoryPersistentUserDetailsManager">
		</authentication-provider>
	</authentication-manager>
	
	<context:annotation-config />
	
	<beans:bean
		id="inMemoryPersistentUserDetailsManager"
		class="kpbinc.cs462.shared.model.manage.InMemoryPersistentUserDetailsManager"
		scope="singleton">
		<beans:constructor-arg name="fileStoreRelativePath" value="/WEB-INF/stores/userdetails.json" />
	</beans:bean>

</beans:beans>



- add userdetails.json file to WEB-INF/stores with minimum admin settings, for example

{"admin":{"username":"admin","password":"password","enabled":true,"accountNonExpired":true,"credentialsNonExpired":true,"accountNonLocked":true,"authorities":[{"authority":"ROLE_USER"}, {"authority":"ROLE_ADMIN"}]}}



- Add AccountsController to kpbinc.cs462.<project-name>.controller, for example

package kpbinc.cs462.guild.controller;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Logger;

import kpbinc.cs462.shared.controller.context.CommonApplicationConstants;
import kpbinc.cs462.shared.controller.context.LoggedInUserContext;
import kpbinc.cs462.shared.model.manage.InMemoryPersistentUserDetailsManager;
import kpbinc.util.logging.GlobalLogUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@Scope(value = "request")
@RequestMapping(value = "/secure/accounts")
public class AccountsController extends GuildBaseSiteContextController implements Serializable {

	//= Class Data =====================================================================================================
	
	private static final long serialVersionUID = 1L;
	
	private static final Logger logger = Logger.getLogger(AccountsController.class.getName());

	
	//= Member Data ====================================================================================================
	
	@Autowired
	private LoggedInUserContext loggedInUserContext;
	
	@Autowired
	private CommonApplicationConstants applicationConstants;
	
	@Autowired
	private InMemoryPersistentUserDetailsManager userDetailsManager;

	
	//= Initialization =================================================================================================
	
	public AccountsController() {
		GlobalLogUtils.logConstruction(this);
	}
	
	
	//= Interface ======================================================================================================
	
	//- Registration ---------------------------------------------------------------------------------------------------
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String getRegistrationForm() {
		return "accounts/register";
	}
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String registerAccount(
			@RequestParam(value = "username", required = true) String username) {
		String redirectLocation = null;
		
		try {
			// Does account already exist?
			userDetailsManager.loadUserByUsername(username);
			// if it did not exist then an exception was thrown
			
			logger.info(String.format("Account with username \"%s\" already exists\n", username));
			
			redirectLocation = "/" + getContextPaths().getDynamicRelativePath() + "/secure/accounts/register";
		}
		catch (UsernameNotFoundException exception) {
			// Account does not exist
			String defaultPassword = applicationConstants.getDefaultPassword();
			logger.info("Registering account with username: " + username + " and default password: " + defaultPassword);
			
			Collection<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
			authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
			
			UserDetails newRegistrantDetails = new User(username, defaultPassword, authorities);
			userDetailsManager.createUser(newRegistrantDetails);
			
			redirectLocation = "/" + getContextPaths().getDynamicRelativePath() + "/secure/accounts/signin";
		}
		
		return "redirect:" + redirectLocation;
	}
	
	//- Sign-in & Authentication Dispatch ------------------------------------------------------------------------------
	
	@RequestMapping(value = "/signin")
	public String getSigninForm() {
		return "accounts/signin";
	}
	
	@RequestMapping(value = "/authenticate/success")
	public String authenticatedSuccessfully() {
		String redirectLocation = "/" + getContextPaths().getDynamicRelativePath() + "/";
		return "redirect:" + redirectLocation;
	}
	
}




- add register.jsp and signup.jsp under WEB-INF/views/accounts/, for example

[register.jsp]
<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib prefix="customtags" tagdir="/WEB-INF/tags" %>

<customtags:pagetemplate>
	<jsp:attribute name="title">Register</jsp:attribute>
	<jsp:body>
		<h1>Register</h1>
		<form method="POST" action="${contextPaths.dynamicPath}/secure/accounts/register">
			<fieldset>
				<label for="username">Username:</label>
				<input type="text" id="username" name="username" size="20" />
				<br>
				<!-- Disabling password usage for now
				<label for="password">Password:</label>
				<input id="password" name="password" type="password" size="20" />
				<br>
				-->
				<br>
				<input type="submit" id="submit" name="submit" value="Register" />
			</fieldset>
		</form>
	</jsp:body>
</customtags:pagetemplate>


[signup.jsp]
<%@ page contentType="text/html" pageEncoding="UTF-8" %>
<%@ taglib prefix="customtags" tagdir="/WEB-INF/tags" %>

<customtags:pagetemplate>
	<jsp:attribute name="title">Sign In</jsp:attribute>
	<jsp:body>
		<h1>Sign In</h1>
		<form method="POST" action="./authenticate">
			<fieldset>
				<label for="username">Username:</label>
				<input id="username" name="username" type="text" size="20" />
				<br />
				<!-- Disabling non-blank password usage for now
				<label for="password">Password:</label>
				<input id="password" name="password" type="password" size="20" />
				<br />
				-->
				<input type="hidden" id="password" name="password" value="${commonApplicationConstants.defaultPassword}" />
				<input id="submit" name="submit" type="submit" value="Sign In" />
			</fieldset>
		</form>
	</jsp:body>
</customtags:pagetemplate>




--- Step 4 Add Navigation Panel

- add navigation.jsp to WEB-INF/views/includes/navigation.jsp, for example

<!-- To be included into a page template -->
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<div id="navigation">
	<a href="${contextPaths.dynamicPath}/">Home</a>
	|
	<c:choose>
		<c:when test="${loggedInUserContext.signedInUserDetails ne null}">
			<a href="${contextPaths.dynamicPath}/secure/accounts/signout">Sign Out</a>
		</c:when>
		<c:otherwise>
			<a href="${contextPaths.dynamicPath}/secure/accounts/signin">Sign In</a>
			/
			<a href="${contextPaths.dynamicPath}/secure/accounts/register">Register</a>
		</c:otherwise>
	</c:choose>
</div>



- add line to pagetemplate.tag and add the following to the body

<%@ include file="/WEB-INF/views/includes/navigation.jsp" %>
